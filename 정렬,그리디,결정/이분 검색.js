/*임의의 N개의 숫자가 입력으로 주어집니다. N개의 수를 오름차순으로 정렬한 다음 N개의 수 
중 한 개의 수인 M이 주어지면 이분검색으로 M이 정렬된 상태에서 몇 번째에 있는지 구하는 
프로그램을 작성하세요. 단 중복값은 존재하지 않습니다.

▣ 입력설명
첫 줄에 한 줄에 자연수 N(3<=N<=1,000,000)과 M이 주어집니다.
두 번째 줄에 N개의 수가 공백을 사이에 두고 주어집니다.
▣ 출력설명
첫 줄에 정렬 후 M의 값의 위치 번호를 출력한다.
▣ 입력예제 1 
8 32
23 87 65 12 57 32 99 81
▣ 출력예제 1
3
 */
/*
이분검색이란?
- 검색할 자료를 반씩 나누어 나머지 반만 검색하는 방식을 반복하여 자료를 찾는 방식
- 자료는 정렬 되어있어야 함.
- 시간복잡도는 O(logN)

풀이
- lt와 rt를 선언하고 0과 배열의 마지막 인덱스로 초기화 해준다.
- 기존 배열을 오름차순으로 정렬한다.
- while문을 이용해 lt가 rt와 같거나 작을때 동안 반복한다.
- 만약 lt와 rt의 중간에 해당하는 값이 target보다 작으면 target이 중간값의 오른쪽에 있으므로
  lt를 중간의 +1 로 옮겨준다.
- 중간에 해당하는 값이 target보다 크다면 target이 중간보다 왼쪽에 있으므로 rt를 중간 -1로 옮겨준다.
- 만약 중간 값이 target과 같다면 answer에 담고 반복문을 종료한다.
*/
(function solution(n, m, arr) {
  let answer = 0;
  let lt = 0;
  let rt = arr.length - 1;

  arr.sort((a, b) => a - b);

  while (lt <= rt) {
    const mid = parseInt((lt + rt) / 2);

    if (arr[mid] === m) {
      answer = mid + 1;
      break;
    } else if (arr[mid] > m) {
      rt = mid - 1;
    } else {
      lt = mid + 1;
    }
  }

  console.log(answer);
})(8, 32, [23, 87, 65, 12, 57, 32, 99, 81]);
